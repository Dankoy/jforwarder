version: "3.9"

services:

  ###### kafka related start #####
  kafka:
    image: docker.io/bitnami/kafka:3.5
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 # 1 for local dev tests w/o compose
#      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@localhost:9093 # 1 for local dev tests w/o compose
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 # 2 for ui and compose
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093 # 2 for ui and compose
      - KAFKA_CFG_NODE_ID=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=L0ZEQh1yTbGhNNUE7-6wSQ
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_ADVERTISED_HOST_NAME=kafka
     # - JMX_PORT=12345
      - "KAFKA_JMX_OPTS=-javaagent:/prometheus/jmx_prometheus_javaagent-1.0.1.jar=12345:/prometheus/kafka-kraft-config-3_0_0.yml -Dcom.sun.management.jmxremote.rmi.port=12345 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false"
    volumes:
      - kafka_volume:/bitnami/kafka
      - ./monitoring/kafka:/prometheus
    networks:
      - jforwarder-network
    healthcheck:
      test: [ "CMD-SHELL","-c", "unset" , "JMX_PORT" ,";", "kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --list" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_NAME=kraft
    networks:
      - jforwarder-network
    depends_on:
      kafka:
        condition: service_healthy

  kafka-message-producer:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile.kafka_message_producer
      args:
        - JAR_VERSION=${JAR_VERSION}
    image: ${DOCKER_HUB_USER}/kafka_message_producer:${JAR_VERSION}
    container_name: kafka-message-producer
    ports:
      - "8083:8083"
    networks:
      - jforwarder-network
    depends_on:
      kafka:
        condition: service_healthy
      spring-eureka-registry:
        condition: service_healthy
      spring-gateway:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    environment:
      - KAFKA_SERVER=kafka:9092
      - EUREKA_SERVER=http://spring-eureka-registry:8761/eureka
      - ZIPKIN_SERVER=http://zipkin:9411/api/v2/spans

  kafka-message-consumer:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile.kafka_message_consumer
      args:
        - JAR_VERSION=${JAR_VERSION}
    image: ${DOCKER_HUB_USER}/kafka_message_consumer:${JAR_VERSION}
    container_name: kafka-message-consumer
    ports:
      - "8085:8085"
    networks:
      - jforwarder-network
    depends_on:
      kafka:
        condition: service_healthy
      spring-eureka-registry:
        condition: service_healthy
      spring-gateway:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    environment:
      - EUREKA_SERVER=http://spring-eureka-registry:8761/eureka
      - ZIPKIN_SERVER=http://zipkin:9411/api/v2/spans
      - KAFKA_SERVER=http://kafka:9092

  ###### kafka related end #####

  ###### subscriptions holder related start #####

  subscriptions-holder-service:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile.subscriptions_holder
      args:
        - JAR_VERSION=${JAR_VERSION}
    image: ${DOCKER_HUB_USER}/subscriptions_holder:${JAR_VERSION}
    container_name: subscriptions-holder
    ports:
      - "8082:8082"
    networks:
      - jforwarder-network
    depends_on:
      subscriptions-holder-postgres:
        condition: service_healthy
      spring-eureka-registry:
        condition: service_healthy
      spring-gateway:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    environment:
      - POSTGRES_CONTAINER_URL=${POSTGRES_CONTAINER_URL}
      - POSTGRES_CONTAINER_USER=${POSTGRES_CONTAINER_USER}
      - POSTGRES_CONTAINER_PASSWORD=${POSTGRES_CONTAINER_PASSWORD}
      - JASYPT_PASSWORD=${JASYPT_MASTER_PASSWORD}
      - EUREKA_SERVER=http://spring-eureka-registry:8761/eureka
      - ZIPKIN_SERVER=http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD-SHELL", "curl localhost:8082/actuator" ]
      interval: 5s
      timeout: 2s
      retries: 10

  subscriptions-holder-postgres:
    env_file:
      - .env
    image: 'postgres:16.2'
    container_name: subscriptions-holder-postgres-db
    environment:
      POSTGRES_DB: ${POSTGRES_CONTAINER_DB}
      POSTGRES_PASSWORD: ${POSTGRES_CONTAINER_PASSWORD}
      POSTGRES_USER: ${POSTGRES_CONTAINER_USER}
      PGUSER: ${POSTGRES_CONTAINER_USER}
    ports:
      - '5432:5432'
    networks:
      - jforwarder-network
    volumes:
      - subscriptions_holder_postgres_volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  ###### subscriptions holder related end #####

  ###### zipkin related start #####

  zipkin-cassandra:
    image: openzipkin/zipkin-cassandra:2.22.2
    container_name: zipkin-cassandra
    volumes:
      - cassandra_volume:/cassandra
    networks:
      - jforwarder-network

  zipkin-dependencies:
    image: openzipkin/zipkin-dependencies:3.1.5
    container_name: zipkin-dependencies
    entrypoint: crond -f
    environment:
      - STORAGE_TYPE=cassandra3
      - CASSANDRA_CONTACT_POINTS=zipkin-cassandra
    depends_on:
      - zipkin-cassandra
    networks:
      - jforwarder-network

  zipkin:
    image: openzipkin/zipkin:3.1.1
    container_name: zipkin
    environment:
      - STORAGE_TYPE=cassandra3
      - CASSANDRA_ENSURE_SCHEMA=false
      - CASSANDRA_CONTACT_POINTS=zipkin-cassandra
    ports:
      - '9411:9411'
    depends_on:
      - zipkin-cassandra
    networks:
      - jforwarder-network

  ###### zipkin related end #####

  ###### eureka related start #####

  spring-eureka-registry:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile.spring_eureka_registry
      args:
        - JAR_VERSION=${JAR_VERSION}
    image: ${DOCKER_HUB_USER}/spring_eureka_registry:${JAR_VERSION}
    container_name: spring-eureka-registry
    ports:
      - "8761:8761"
    networks:
      - jforwarder-network
    healthcheck:
      test: [ "CMD-SHELL", "curl localhost:8761/actuator" ]
      interval: 5s
      timeout: 2s
      retries: 10

  ###### eureka related end #####

  ###### gateway related start #####

  spring-gateway:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile.spring_gateway
      args:
        - JAR_VERSION=${JAR_VERSION}
    image: ${DOCKER_HUB_USER}/spring_gateway:${JAR_VERSION}
    container_name: spring-gateway
    ports:
      - "8760:8760"
    networks:
      - jforwarder-network
    depends_on:
      spring-eureka-registry:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    environment:
      - EUREKA_SERVER=http://spring-eureka-registry:8761/eureka
      - ZIPKIN_SERVER=http://zipkin:9411/api/v2/spans
    healthcheck:
      test: [ "CMD-SHELL", "curl localhost:8760/actuator" ]
      interval: 5s
      timeout: 2s
      retries: 10

  ###### gateway related start #####

  ###### coubs initiator  related start #####

  t-coubs-initiator:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile.t_coubs_initiator
      args:
        - JAR_VERSION=${JAR_VERSION}
    image: ${DOCKER_HUB_USER}/t_coubs_initiator:${JAR_VERSION}
    container_name: t-coubs-initiator
    ports:
      - "8081:8081"
    networks:
      - jforwarder-network
    depends_on:
      spring-eureka-registry:
        condition: service_healthy
      spring-gateway:
        condition: service_healthy
      zipkin:
        condition: service_healthy
      subscriptions-holder-service:
        condition: service_healthy
    environment:
      - EUREKA_SERVER=http://spring-eureka-registry:8761/eureka
      - ZIPKIN_SERVER=http://zipkin:9411/api/v2/spans
      - GATEWAY_COUB_URL=http://spring-gateway:8760/cc/

    ###### coubs initiator related end #####

  #### telegram bot related start ####
  telegram-bot:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile.coub_forwarder_telegram_bot
      args:
        - JAR_VERSION=${JAR_VERSION}
    image: ${DOCKER_HUB_USER}/coub_forwarder_telegram_bot:${JAR_VERSION}
    container_name: telegram-bot
    ports:
      - "8084:8084"
    networks:
      - jforwarder-network
    depends_on:
      spring-eureka-registry:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    environment:
      - EUREKA_SERVER=http://spring-eureka-registry:8761/eureka
      - ZIPKIN_SERVER=http://zipkin:9411/api/v2/spans
      - TELEGRAM_BOT_NAME=${TELEGRAM_BOT_NAME}
      - TELEGRAM_BOT_API_TOKEN=${TELEGRAM_BOT_API_TOKEN}

  #### telegram bot related end ####

  #### coub tags searcher start ####
  coub-smart-searcher:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile.coub_smart_searcher
      args:
        - JAR_VERSION=${JAR_VERSION}
    image: ${DOCKER_HUB_USER}/coub_smart_searcher:${JAR_VERSION}
    container_name: coub-smart-searcher
    ports:
      - "8086:8086"
    networks:
      - jforwarder-network
    depends_on:
      spring-eureka-registry:
        condition: service_healthy
      spring-gateway:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    environment:
      - EUREKA_SERVER=http://spring-eureka-registry:8761/eureka
      - ZIPKIN_SERVER=http://zipkin:9411/api/v2/spans
      - GATEWAY_COUB_URL=http://spring-gateway:8760/cc/
  #### coub tags searcher start ####


  #### subscriptions scheduler start ####
  subscriptions-scheduler:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile.subscriptions_scheduler
      args:
        - JAR_VERSION=${JAR_VERSION}
    image: ${DOCKER_HUB_USER}/subscriptions_scheduler:${JAR_VERSION}
    container_name: subscriptions-scheduler
    ports:
      - "8087:8087"
    networks:
      - jforwarder-network
    depends_on:
      spring-eureka-registry:
        condition: service_healthy
      zipkin:
        condition: service_healthy
      subscriptions-holder-service:
        condition: service_healthy
    environment:
      - EUREKA_SERVER=http://spring-eureka-registry:8761/eureka
      - ZIPKIN_SERVER=http://zipkin:9411/api/v2/spans

  #### subscriptions scheduler end ####

  #### telegram chat service start ####
  telegram-chat-service-postgres:
    env_file:
      - .env
    image: 'postgres:16.2'
    container_name: telegram-chat-service-postgres-db
    environment: 
      POSTGRES_DB: ${TELEGRAM_CHAT_SERVICE_POSTGRES_CONTAINER_DB}
      POSTGRES_PASSWORD: ${TELEGRAM_CHAT_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_USER: ${TELEGRAM_CHAT_SERVICE_POSTGRES_USER}
      PGUSER: ${TELEGRAM_CHAT_SERVICE_POSTGRES_USER}
    ports:
      - '5433:5432'
    networks:
      - jforwarder-network
    volumes:
      - telegram_chat_service_postgres_volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  #### telegram chat service end ####



  #  redis-rate-limiter:
  #    image: 'redis:latest'
  #    container_name: redis-rate-limiter
  #    ports:
  #      - '6379:6379'
  #    networks:
  #      - jforwarder-network


volumes:
  kafka_volume:
    driver: local
  subscriptions_holder_postgres_volume:
    driver: local
  cassandra_volume:
    driver: local
  telegram_chat_service_postgres_volume:
    driver: local

networks:
  jforwarder-network:
    name: jforwarder-network
