/*
 * This file is generated by jOOQ.
 */
package ru.dankoy.telegramchatservice.core.domain.jooq.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.dankoy.telegramchatservice.core.domain.jooq.Keys;
import ru.dankoy.telegramchatservice.core.domain.jooq.Public;
import ru.dankoy.telegramchatservice.core.domain.jooq.tables.records.ChatsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Chats extends TableImpl<ChatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.chats</code>
     */
    public static final Chats CHATS = new Chats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChatsRecord> getRecordType() {
        return ChatsRecord.class;
    }

    /**
     * The column <code>public.chats.id</code>.
     */
    public final TableField<ChatsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.chats.chat_id</code>.
     */
    public final TableField<ChatsRecord, Long> CHAT_ID = createField(DSL.name("chat_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.chats.type</code>.
     */
    public final TableField<ChatsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.chats.title</code>.
     */
    public final TableField<ChatsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(80), this, "");

    /**
     * The column <code>public.chats.first_name</code>.
     */
    public final TableField<ChatsRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.chats.last_name</code>.
     */
    public final TableField<ChatsRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.chats.username</code>.
     */
    public final TableField<ChatsRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.chats.active</code>.
     */
    public final TableField<ChatsRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.chats.message_thread_id</code>.
     */
    public final TableField<ChatsRecord, Integer> MESSAGE_THREAD_ID = createField(DSL.name("message_thread_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.chats.date_created</code>.
     */
    public final TableField<ChatsRecord, LocalDateTime> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.chats.date_modified</code>.
     */
    public final TableField<ChatsRecord, LocalDateTime> DATE_MODIFIED = createField(DSL.name("date_modified"), SQLDataType.LOCALDATETIME(6), this, "");

    private Chats(Name alias, Table<ChatsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Chats(Name alias, Table<ChatsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.chats</code> table reference
     */
    public Chats(String alias) {
        this(DSL.name(alias), CHATS);
    }

    /**
     * Create an aliased <code>public.chats</code> table reference
     */
    public Chats(Name alias) {
        this(alias, CHATS);
    }

    /**
     * Create a <code>public.chats</code> table reference
     */
    public Chats() {
        this(DSL.name("chats"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ChatsRecord, Long> getIdentity() {
        return (Identity<ChatsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChatsRecord> getPrimaryKey() {
        return Keys.CHATS_PKEY;
    }

    @Override
    public Chats as(String alias) {
        return new Chats(DSL.name(alias), this);
    }

    @Override
    public Chats as(Name alias) {
        return new Chats(alias, this);
    }

    @Override
    public Chats as(Table<?> alias) {
        return new Chats(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Chats rename(String name) {
        return new Chats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chats rename(Name name) {
        return new Chats(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chats rename(Table<?> name) {
        return new Chats(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chats where(Condition condition) {
        return new Chats(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chats where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chats where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chats where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chats where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chats where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chats where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chats where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chats whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chats whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
