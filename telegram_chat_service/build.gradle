import com.github.jasypt.encrypt.JasyptPlugin

import org.jooq.codegen.*
import org.jooq.meta.jaxb.*
import org.jooq.meta.*

buildscript {
    dependencies {
        classpath files('jasypt-encrypt-plugin-1.3.3.jar')
        classpath files('jooq-codegen-gradle-3.19.18.jar')
    }
}

plugins {
    id 'multimodule-config'
    id 'spring-conventions'
    id 'micrometer-conventions'
    id 'loki-conventions'
    id 'spring-web-conventions'
    id 'spring-feign-conventions'
    id "io.github.ximtech.jasypt-encrypt-plugin" version "1.3.3"
    id "org.jooq.jooq-codegen-gradle" version "3.19.18"
    // id 'org.liquibase.gradle' version '3.0.1'
}

apply plugin: JasyptPlugin

group = 'ru.dankoy.telegramchatservice'
// version comes from root project


jooq  {

  configuration {

    jdbc {
      driver = 'org.h2.Driver'
      url = 'jdbc:h2:~/test-gradle'
      user = 'sa'
      password = ''
    }


  generator {

    database {

      properties {
        // property {
        //   key = "classpath"
        //   value = "${project.projectDir}/src/main/resources"
        // }

        property {
          key = "scripts"
          // value = "${project.projectDir}/src/main/resources/db/changelog/db.changelog-master.yaml"
          value = "classpath:/db/changelog/db.changelog-master.yaml"
        }
      }

      name = "org.jooq.meta.extensions.liquibase.LiquibaseDatabase"
      includes = ".*"

      // All elements that are excluded from your schema (A Java regular expression.
      // Use the pipe to separate several expressions). Excludes match before
      // includes, i.e. excludes have a higher priority
      excludes = 
           "UNUSED_TABLE                # This table (unqualified name) should not be generated" +
         "| PREFIX_.*                   # Objects with a given prefix should not be generated" +
         "| SECRET_SCHEMA//.SECRET_TABLE # This table (qualified name) should not be generated" +
         "| SECRET_ROUTINE              # This routine (unqualified name) ..." +
         "| databasechangelog" +
         "| databasechangeloglock"

      inputSchema = "dev"
    }

    // Generation flags: See advanced configuration properties
    generate {
      pojos true
      daos true
    }

    target {
      packageName = "ru.dankoy.telegramchatservice"
      directory = "${project.buildDir}/generated/jooq/primary"
    }
  }
  }
}

dependencies {

    // liquibase
    implementation 'org.liquibase:liquibase-core'

    // jooq
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.jooq:jooq-codegen'
    implementation 'org.jooq:jooq-meta'
    jooqCodegen 'org.jooq:jooq-meta-extensions-liquibase:3.19.18'
    jooqCodegen 'com.h2database:h2' // should be testcontainers
    jooqCodegen 'org.liquibase:liquibase-core'


    // jackson
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    // eureka
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    // aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // mapstruct
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    // data
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.liquibase:liquibase-core'

}
