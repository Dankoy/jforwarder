groups:

  ############ PostgreSQL

  - name: PostgresExporter

    rules:

      - alert: postgresqldown
        expr: 'pg_up == 0'
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: postgresql down (instance {{ $labels.instance }})
          description: "postgresql instance is down\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqlrestarted
        expr: 'time() - pg_postmaster_start_time_seconds < 60'
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: postgresql restarted (instance {{ $labels.instance }})
          description: "postgresql restarted\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqlexportererror
        expr: 'pg_exporter_last_scrape_error > 0'
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: postgresql exporter error (instance {{ $labels.instance }})
          description: "postgresql exporter is showing errors. a query may be buggy in query.yaml\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqltablenotautovacuumed
        expr: '(pg_stat_user_tables_last_autovacuum > 0) and (time() - pg_stat_user_tables_last_autovacuum) > 60 * 60 * 24 * 10'
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: postgresql table not auto vacuumed (instance {{ $labels.instance }})
          description: "table {{ $labels.relname }} has not been auto vacuumed for 10 days\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqltablenotautoanalyzed
        expr: '(pg_stat_user_tables_last_autoanalyze > 0) and (time() - pg_stat_user_tables_last_autoanalyze) > 24 * 60 * 60 * 10'
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: postgresql table not auto analyzed (instance {{ $labels.instance }})
          description: "table {{ $labels.relname }} has not been auto analyzed for 10 days\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqltoomanyconnections
        expr: 'sum by (instance, job, server) (pg_stat_activity_count) > min by (instance, job, server) (pg_settings_max_connections * 0.8)'
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: postgresql too many connections (instance {{ $labels.instance }})
          description: "postgresql instance has too many connections (> 80%).\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqlnotenoughconnections
        expr: 'sum by (datname) (pg_stat_activity_count{datname!~"template.*|postgres"}) < 5'
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: postgresql not enough connections (instance {{ $labels.instance }})
          description: "postgresql instance should have more connections (> 5)\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqldeadlocks
        expr: 'increase(pg_stat_database_deadlocks{datname!~"template.*|postgres"}[1m]) > 5'
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: postgresql dead locks (instance {{ $labels.instance }})
          description: "postgresql has dead-locks\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqlhighrollbackrate
        expr: 'sum by (namespace,datname) ((rate(pg_stat_database_xact_rollback{datname!~"template.*|postgres",datid!="0"}[3m])) / ((rate(pg_stat_database_xact_rollback{datname!~"template.*|postgres",datid!="0"}[3m])) + (rate(pg_stat_database_xact_commit{datname!~"template.*|postgres",datid!="0"}[3m])))) > 0.02'
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: postgresql high rollback rate (instance {{ $labels.instance }})
          description: "ratio of transactions being aborted compared to committed is > 2 %\n  value = {{ $value }}\n  labels = {{ $labels }}"

#      - alert: postgresqlcommitratelow
#        expr: 'rate(pg_stat_database_xact_commit[2h]) < 10'
#        for: 2m
#        labels:
#          severity: critical
#        annotations:
#          summary: postgresql commit rate low (instance {{ $labels.instance }})
#          description: "postgresql seems to be processing very few transactions\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqllowxidconsumption
        expr: 'rate(pg_txid_current[1m]) < 5'
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: postgresql low xid consumption (instance {{ $labels.instance }})
          description: "postgresql seems to be consuming transaction ids very slowly\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqlhighratestatementtimeout
        expr: 'rate(postgresql_errors_total{type="statement_timeout"}[1m]) > 3'
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: postgresql high rate statement timeout (instance {{ $labels.instance }})
          description: "postgres transactions showing high rate of statement timeouts\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqlhighratedeadlock
        expr: 'increase(postgresql_errors_total{type="deadlock_detected"}[1m]) > 1'
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: postgresql high rate deadlock (instance {{ $labels.instance }})
          description: "postgres detected deadlocks\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqlunusedreplicationslot
        expr: 'pg_replication_slots_active == 0'
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: postgresql unused replication slot (instance {{ $labels.instance }})
          description: "unused replication slots\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqltoomanydeadtuples
        expr: '((pg_stat_user_tables_n_dead_tup > 10000) / (pg_stat_user_tables_n_live_tup + pg_stat_user_tables_n_dead_tup)) >= 0.1'
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: postgresql too many dead tuples (instance {{ $labels.instance }})
          description: "postgresql dead tuples is too large\n  value = {{ $value }}\n  labels = {{ $labels }}"

      # - alert: postgresqlconfigurationchanged
      #   expr: '{__name__=~"pg_settings_.*"} != on(y, __name__) {__name__=~"pg_settings_([^t]|t[^r]|tr[^a]|tra[^n]|tran[^s]|trans[^a]|transa[^c]|transac[^t]|transact[^i]|transacti[^o]|transactio[^n]|transaction[^_]|transaction_[^r]|transaction_r[^e]|transaction_re[^a]|transaction_rea[^d]|transaction_read[^_]|transaction_read_[^o]|transaction_read_o[^n]|transaction_read_on[^l]|transaction_read_onl[^y]).*"} offset 5m'
      #   for: 0m
      #   labels:
      #     severity: info
      #   annotations:
      #     summary: postgresql configuration changed (instance {{ $labels.instance }})
      #     description: "postgres database configuration change has occurred\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqlsslcompressionactive
        expr: 'sum(pg_stat_ssl_compression) > 0'
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: postgresql ssl compression active (instance {{ $labels.instance }})
          description: "database connections with ssl compression enabled. this may add significant jitter in replication delay. replicas should turn off ssl compression via `sslcompression=0` in `recovery.conf`.\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqltoomanylocksacquired
        expr: '((sum (pg_locks_count)) / (pg_settings_max_locks_per_transaction * pg_settings_max_connections)) > 0.20'
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: postgresql too many locks acquired (instance {{ $labels.instance }})
          description: "too many locks acquired on the database. if this alert happens frequently, we may need to increase the postgres setting max_locks_per_transaction.\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqlbloatindexhigh(>80%)
        expr: 'pg_bloat_btree_bloat_pct > 80 and on (idxname) (pg_bloat_btree_real_size > 100000000)'
        for: 1h
        labels:
          severity: warning
        annotations:
          summary: postgresql bloat index high (> 80%) (instance {{ $labels.instance }})
          description: "the index {{ $labels.idxname }} is bloated. you should execute `reindex index concurrently {{ $labels.idxname }};`\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqlbloattablehigh(>80%)
        expr: 'pg_bloat_table_bloat_pct > 80 and on (relname) (pg_bloat_table_real_size > 200000000)'
        for: 1h
        labels:
          severity: warning
        annotations:
          summary: postgresql bloat table high (> 80%) (instance {{ $labels.instance }})
          description: "the table {{ $labels.relname }} is bloated. you should execute `vacuum {{ $labels.relname }};`\n  value = {{ $value }}\n  labels = {{ $labels }}"

      - alert: postgresqlinvalidindex
        expr: 'pg_general_index_info_pg_relation_size{indexrelname=~".*ccnew.*"}'
        for: 6h
        labels:
          severity: warning
        annotations:
          summary: postgresql invalid index (instance {{ $labels.instance }})
          description: "the table {{ $labels.relname }} has an invalid index: {{ $labels.indexrelname }}. you should execute `drop index {{ $labels.indexrelname }};`\n  value = {{ $value }}\n  labels = {{ $labels }}"
