version: "3.9"

services:

  # can't pull from gcr.io. Permission denied
  #  cadvisor:
  #    image: gcr.io/cadvisor-arm64:v0.47.2
  #    container_name: cadvisor
  #    volumes:
  #      - '/:/rootfs:ro'
  #      - '/var/run:/var/run:ro'
  #      - '/sys:/sys:ro'
  #      - '/var/lib/docker/:/var/lib/docker:ro'
  #    networks:
  #      - jforwarder-network

  #  tempo:
  #    image: grafana/tempo
  #    container_name: grafana-tempo
  #    command: [ "-config.file=/etc/tempo.yaml" ]
  #    volumes:
  #      - ./tempo/tempo-local.yml:/etc/tempo.yaml
  #      - tempo_volume:/tmp/tempo
  #    ports:
  #      - "14268"  # jaeger ingest
  #      - "9411:9411" # zipkin
  #    networks:
  #      - jforwarder-network
  #
  loki:
    image: grafana/loki:3.2.0
    container_name: grafana-loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
    environment:
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    volumes:
      - ./loki/local-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_volume:/loki
    networks:
      - jforwarder-network

  prometheus-node-exporter:
    image: prom/node-exporter:v1.8.2
    container_name: prometheus-node-exporter
    user: root
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'
    networks:
      - jforwarder-network

  grafana:
    env_file:
      - .env
    image: 'grafana/grafana:11.2.2'
    container_name: grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana_volume:/var/lib/grafana
      - './grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards'
      - './grafana/provisioning/datasources:/etc/grafana/provisioning/datasources'
    networks:
      - jforwarder-network

  prometheus:
    image: 'prom/prometheus:v2.54.1'
    container_name: prometheus
    ports:
      - '9090:9090'
    command: '--config.file=/etc/prometheus/config.yml'
    volumes:
      - './prometheus/prometheus.yml:/etc/prometheus/config.yml'
      - './prometheus/alertmanager:/etc/prometheus/alertmanager'
      - prometheus_volume:/prometheus
    networks:
      - jforwarder-network

  prometheus-postgres-exporter-subscriptions-holder:
    env_file:
    - ".env"
    image: "bitnami/postgres-exporter:0.17.1"
    container_name: "prometheus-postgres-exporter-subscriptions-holder"
    ports:
    - "9187:9187"
    environment:
    - "DATA_SOURCE_NAME=${SUBSCRIPTIONS_HOLDER_DATA_SOURCE}"
    networks:
    - "jforwarder-network"

  prometheus-postgres-exporter-telegram-chat:
    env_file:
    - ".env"
    image: "bitnami/postgres-exporter:0.17.1"
    container_name: "prometheus-postgres-exporter-telegram-chat"
    ports:
    - "9188:9187"
    environment:
    - "DATA_SOURCE_NAME=${TELEGRAM_CHAT_DATA_SOURCE}"
    networks:
    - "jforwarder-network"

  prometheus-alertmanager:
    image: 'prom/alertmanager:v0.27.0'
    container_name: prometheus-alertmanager
    ports:
      - "9093:9093"
    command:
        - '--config.file=/etc/alertmanager/alertmanager.yml'
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - jforwarder-network

  grafana-mimir:
    image: 'docker.io/grafana/mimir:2.14.0'
    container_name: grafana-mimir
    ports: 
     - "9009:9009"
    command: ["-config.file=/etc/mimir.yaml"]
    depends_on:
      - minio
    volumes:
      - ./mimir/mimir.yml:/etc/mimir.yaml
      - mimir_volume:/data
    networks:
      - jforwarder-network
    
  minio:
    image: 'docker.io/minio/minio:RELEASE.2024-10-13T13-34-11Z'
    container_name: minio
    command: server --quiet /data
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://127.0.0.1:9000/minio/health/live; }    # check if Minio is alive
        minio $$0 "$$@" --quiet & echo $$! > /tmp/minio.pid                   # start Minio in the background
        while ! isAlive; do sleep 0.1; done                                # wait until Minio is alive
        mc alias set minio http://127.0.0.1:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD # setup Minio client
        mc mb minio/mimir || true                                    # create a test bucket
        mc anonymous set public minio/mimir                          # make the test bucket public
        kill -s INT $$(cat /tmp/minio.pid) && rm /tmp/minio.pid             # stop Minio
        while isAlive; do sleep 0.1; done                                  # wait until Minio is stopped
        exec minio $$0 "$$@"                                                 # start Minio in the foreground
      '
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_volume:/data:rw
    networks:
      - jforwarder-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # createbuckets:
  #   image: 'docker.io/minio/mc:RELEASE.2024-10-08T09-37-26Z'
  #   container_name: minio-mc
  #   environment:
  #     - MINIO_ROOT_USER=${MINIO_ROOT_USER}
  #     - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
  #   depends_on:
  #     - minio
  #   entrypoint: >
  #     /bin/sh -c "
  #     /usr/bin/mc alias set myminio http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD;
  #     /usr/bin/mc mb myminio/mimir-blocks;
  #     /usr/bin/mc mb myminio/mimir-ruler;
  #     /usr/bin/mc mb myminio/mimir;
  #     /usr/bin/mc policy set public myminio/mimir-blocks;
  #     /usr/bin/mc policy set public myminio/mimir-ruler;
  #     /usr/bin/mc policy set public myminio/mimir;
  #     exit 0;
  #     "
  #   networks:
  #     - jforwarder-network

volumes:
  prometheus_volume:
    driver: local
  grafana_volume:
    driver: local
  #  tempo_volume:
  #    driver: local
  loki_volume:
    driver: local
  minio_volume:
  mimir_volume:
    driver: local

networks:
  jforwarder-network:
    name: jforwarder-network
    external: true
