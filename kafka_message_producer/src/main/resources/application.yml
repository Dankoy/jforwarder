application:
  kafka:
    topic:
#      coub-subscriptions: "coub-subscriptions" # one topic for all subs
      coub-com-subs: "coub-com-sub"
      coub-tag-subs: "coub-tag-sub"
      coub-channel-subs: "coub-channel-sub"
      protobuf-coub-com-subs: "coub-com-sub-protobuf"
      protobuf-coub-tag-subs: "coub-tag-sub-protobuf"
      protobuf-coub-channel-subs: "coub-channel-sub-protobuf"
    producers:
      coubs:
        client-id: "coubs-producer" # custom props configuration in factory
    schema-registry:
      url: ${SCHEMA_REGISTRY:http://localhost:9081}

spring:
  application:
    name: kafka-message-producer
  kafka:
    bootstrap-servers: ${KAFKA_SERVER:localhost:9094} # common bootstrap server for every producer
    producer:
      client-id: "coubs-producer"
      retries: 5


server:
  port: 8083


logging:
  level:
    root: INFO
    ru:
      dankoy:
        kafkamessageproducer:
          core:
            feign: TRACE
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"


eureka:
  client:
    registerWithEureka: true
    serviceUrl:
      defaultZone: ${EUREKA_SERVER:http://localhost:8761/eureka}
    healthcheck:
      enabled: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    #    instance-id: "${spring.application.name}:${server.port}"

management:
  info:
    env:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  health:
    defaults:
      enabled: true
    diskspace:
      enabled: true
  zipkin:
    tracing:
      connect-timeout: 1s
      read-timeout: 10s
      endpoint: ${ZIPKIN_SERVER:http://localhost:9411/api/v2/spans}

  tracing:
    sampling:
      probability: 1.0

  # For Exemplars to work we need histogram buckets
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true

#debug: true

